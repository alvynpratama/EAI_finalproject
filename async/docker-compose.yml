version: '3.8'

services:
  # User Service
  user-service:
    build: ./user-service
    ports: ["8001:8000"]
    env_file: ./user-service/.env
    depends_on:
      user_db:
        condition: service_healthy # <-- Menunggu DB sehat
      rabbitmq:
        condition: service_started
    networks: [iae_network]
    volumes: ["./user-service:/var/www"]
    restart: always

  # Product Service
  product-service:
    build: ./product-service
    ports: ["8002:8000"]
    env_file: ./product-service/.env
    depends_on:
      product_db:
        condition: service_healthy # <-- Menunggu DB sehat
      rabbitmq:
        condition: service_started
    networks: [iae_network]
    volumes: ["./product-service:/var/www"]
    restart: always

  # Order Service
  order-service:
    build: ./order-service
    ports: ["8003:8000"]
    env_file: ./order-service/.env
    depends_on:
      order_db:
        condition: service_healthy # <-- Menunggu DB sehat
      rabbitmq:
        condition: service_started
    networks: [iae_network]
    volumes: ["./order-service:/var/www"]
    restart: always

  # Payment Service
  payment-service:
    build: ./payment-service
    ports: ["8004:8000"]
    env_file: ./payment-service/.env
    depends_on:
      payment_db:
        condition: service_healthy # <-- Menunggu DB sehat
      rabbitmq:
        condition: service_started
    networks: [iae_network]
    volumes: ["./payment-service:/var/www"]
    restart: always

  # Menu Service (Hasura)
  menu-service:
    image: hasura/graphql-engine:v2.38.0
    ports: ["8080:8080"]
    depends_on:
      menu_db:
        condition: service_started
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://user_menu:password_menu@menu_db:5432/menu_db
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: my-super-secret-key
    networks: [iae_network]

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    ports: ["5672:5672", "15672:15672"]
    networks: [iae_network]
    restart: always

  # === DATABASES ===
  user_db:
    image: mysql:8
    environment: { MYSQL_DATABASE: user_service_db, MYSQL_ROOT_PASSWORD: root }
    healthcheck: # <-- PERBAIKAN DI SINI
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    volumes: [user_db_data:/var/lib/mysql]
    networks: [iae_network]
    restart: always

  product_db:
    image: mysql:8
    environment: { MYSQL_DATABASE: product_service_db, MYSQL_ROOT_PASSWORD: root }
    healthcheck: # <-- PERBAIKAN DI SINI
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    volumes: [product_db_data:/var/lib/mysql]
    networks: [iae_network]
    restart: always

  order_db:
    image: mysql:8
    environment: { MYSQL_DATABASE: order_service_db, MYSQL_ROOT_PASSWORD: root }
    healthcheck: # <-- PERBAIKAN DI SINI
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    volumes: [order_db_data:/var/lib/mysql]
    networks: [iae_network]
    restart: always

  payment_db:
    image: mysql:8
    environment: { MYSQL_DATABASE: payment_service_db, MYSQL_ROOT_PASSWORD: root }
    healthcheck: # <-- PERBAIKAN DI SINI
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    volumes: [payment_db_data:/var/lib/mysql]
    networks: [iae_network]
    restart: always

  menu_db:
    image: postgres:15
    restart: always
    environment: { POSTGRES_USER: user_menu, POSTGRES_PASSWORD: password_menu, POSTGRES_DB: menu_db }
    volumes: [menu_db_data:/var/lib/postgresql/data]
    networks: [iae_network]

networks:
  iae_network:
    driver: bridge

volumes:
  user_db_data:
  product_db_data:
  order_db_data:
  payment_db_data:
  menu_db_data:
